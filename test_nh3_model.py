import numpy as np
"""
Test nh3 model against Erik's IDL-based code


function nh3model, v, nu = nu, n11 = n11, n22 = n22, n33 = n33, n44 = n44, $
             str = s, tkin = tkin, logn = logn, v0 = v0, sigv = sigv, $
             tautex = tautex, fortho = fortho, tex = tex

v = findgen(150)*0.4 - 30
print,v
ckms = 2.99792458d5
print,(1-v/ckms)*23.6944955d9
testspec = nh3model(v, /n11, tkin=20, tex=20, logn=14, sigv=1.0, fortho=0.5, v0=0)
print,testspec
"""

xarr_idl_str = """
   2.3696867e+10   2.3696835e+10   2.3696803e+10   2.3696772e+10   2.3696740e+10   2.3696709e+10   2.3696677e+10   2.3696645e+10   2.3696614e+10
   2.3696582e+10   2.3696550e+10   2.3696519e+10   2.3696487e+10   2.3696456e+10   2.3696424e+10   2.3696392e+10   2.3696361e+10   2.3696329e+10
   2.3696298e+10   2.3696266e+10   2.3696234e+10   2.3696203e+10   2.3696171e+10   2.3696139e+10   2.3696108e+10   2.3696076e+10   2.3696045e+10
   2.3696013e+10   2.3695981e+10   2.3695950e+10   2.3695918e+10   2.3695887e+10   2.3695855e+10   2.3695823e+10   2.3695792e+10   2.3695760e+10
   2.3695728e+10   2.3695697e+10   2.3695665e+10   2.3695634e+10   2.3695602e+10   2.3695570e+10   2.3695539e+10   2.3695507e+10   2.3695476e+10
   2.3695444e+10   2.3695412e+10   2.3695381e+10   2.3695349e+10   2.3695317e+10   2.3695286e+10   2.3695254e+10   2.3695223e+10   2.3695191e+10
   2.3695159e+10   2.3695128e+10   2.3695096e+10   2.3695065e+10   2.3695033e+10   2.3695001e+10   2.3694970e+10   2.3694938e+10   2.3694906e+10
   2.3694875e+10   2.3694843e+10   2.3694812e+10   2.3694780e+10   2.3694748e+10   2.3694717e+10   2.3694685e+10   2.3694654e+10   2.3694622e+10
   2.3694590e+10   2.3694559e+10   2.3694527e+10   2.3694496e+10   2.3694464e+10   2.3694432e+10   2.3694401e+10   2.3694369e+10   2.3694337e+10
   2.3694306e+10   2.3694274e+10   2.3694243e+10   2.3694211e+10   2.3694179e+10   2.3694148e+10   2.3694116e+10   2.3694085e+10   2.3694053e+10
   2.3694021e+10   2.3693990e+10   2.3693958e+10   2.3693926e+10   2.3693895e+10   2.3693863e+10   2.3693832e+10   2.3693800e+10   2.3693768e+10
   2.3693737e+10   2.3693705e+10   2.3693674e+10   2.3693642e+10   2.3693610e+10   2.3693579e+10   2.3693547e+10   2.3693515e+10   2.3693484e+10
   2.3693452e+10   2.3693421e+10   2.3693389e+10   2.3693357e+10   2.3693326e+10   2.3693294e+10   2.3693263e+10   2.3693231e+10   2.3693199e+10
   2.3693168e+10   2.3693136e+10   2.3693104e+10   2.3693073e+10   2.3693041e+10   2.3693010e+10   2.3692978e+10   2.3692946e+10   2.3692915e+10
   2.3692883e+10   2.3692852e+10   2.3692820e+10   2.3692788e+10   2.3692757e+10   2.3692725e+10   2.3692693e+10   2.3692662e+10   2.3692630e+10
   2.3692599e+10   2.3692567e+10   2.3692535e+10   2.3692504e+10   2.3692472e+10   2.3692441e+10   2.3692409e+10   2.3692377e+10   2.3692346e+10
   2.3692314e+10   2.3692282e+10   2.3692251e+10   2.3692219e+10   2.3692188e+10   2.3692156e+10
"""

testspec_idl_str = """
       0.0000000       0.0000000       0.0000000       0.0000000       0.0000000       0.0000000       0.0000000   1.9135795e-14   3.7697515e-13
   6.3703061e-12   9.1861383e-11   1.1294750e-09   1.1839492e-08   1.0580753e-07   8.0616631e-07   5.2368360e-06   2.9003903e-05   0.00013695986
   0.00055142509    0.0018929080    0.0055400651     0.013823619     0.029404787     0.053321606     0.082436362      0.10868616      0.12223634
      0.11729411     0.096023908     0.067051113     0.039924511     0.020268059    0.0087725097    0.0032374212    0.0010187798   0.00027339542
   6.2566847e-05   1.2210934e-05   2.0323888e-06   2.8851603e-07   3.5387596e-08   8.7448587e-09   4.8568869e-08   3.8652753e-07   2.6425374e-06
   1.5426704e-05   7.6931356e-05   0.00032790160    0.0011952383    0.0037285769    0.0099619887     0.022815614     0.044834537     0.075675520
      0.10985076      0.13732061      0.14800828      0.13766796      0.11054538     0.076625464     0.045831096     0.023640645     0.010510204
    0.0040306060    0.0013709608   0.00061114372    0.0011254490    0.0038909377     0.012393061     0.033892588     0.079260447      0.15847517
      0.27100397      0.39674268      0.49797092      0.53667150      0.49701727      0.39545745      0.27008609      0.15819155     0.079424753
     0.034186370     0.012620468    0.0040079424    0.0011512351   0.00054236625    0.0011331575    0.0034686900    0.0094567385     0.022102147
     0.044205897     0.075689391      0.11101017      0.13957184      0.15054336      0.13937328      0.11077209     0.075575987     0.044255776
     0.022240469    0.0095914939    0.0035494245    0.0011269316   0.00030688722   7.1655378e-05   1.4339347e-05   2.4581414e-06   3.6086692e-07
   4.5956093e-08   1.1613818e-08   6.1999681e-08   4.7935010e-07   3.1847898e-06   1.8062023e-05   8.7463161e-05   0.00036177110    0.0012788397
    0.0038654639    0.0099969283     0.022136193     0.041999946     0.068346207     0.095493423      0.11469525      0.11855183      0.10554158
     0.080964799     0.053530494     0.030501510     0.014975614    0.0063337271    0.0023063569   0.00072261042   0.00019463863   4.5031177e-05
   8.9404465e-06   1.5217973e-06   2.2189477e-07   2.7693144e-08   2.9562048e-09   2.6975940e-10   2.1030253e-11   1.4007412e-12   8.0370394e-14
   3.8271617e-15       0.0000000       0.0000000       0.0000000       0.0000000       0.0000000
"""

idl_test_xarr = np.array(xarr_idl_str.split(), dtype='float')
idl_test_spectrum = np.array(testspec_idl_str.split(), dtype='float')

from pyspeckit.spectrum.models import ammonia
import pyspeckit

refX = 23.6944955e9 # from nh3model.pro
refX = 23.694506e9 # from modelspec.pro

xarr11 = pyspeckit.units.SpectroscopicAxis(np.arange(-30,30,0.4),
        units='km/s', refX=refX, refX_units='Hz', frame='LSRK',
        xtype='Frequency')

# The two arrays are shifted in frequency because nh3model.pro converts to
# frequency with a different reference; the reference frequency is not centered
# on any of the individual lines
#print np.array(xarr11.as_unit('Hz')) - idl_test_xarr

ps_spectrum = ammonia.ammonia(xarr11, tkin=20, tex=20, ntot=14, width=1,
                              xoff_v=0.0, fortho=0.5, )

absfracdiff = np.abs(idl_test_spectrum - ps_spectrum)/idl_test_spectrum * (idl_test_spectrum > 0)

assert np.nanmax(absfracdiff) < 0.01

plot = False
if plot:
    import pylab as pl
    fig1 = pl.figure(1)
    fig1.clf()
    ax1 = fig1.gca()
    ax1.plot(idl_test_xarr, idl_test_spectrum)
    ax1.plot(xarr11.as_unit('Hz'), ps_spectrum)

    fig2 = pl.figure(2)
    fig2.clf()
    ax2 = fig2.gca()
    ax2.plot(xarr11, np.abs(idl_test_spectrum - ps_spectrum)/idl_test_spectrum)

    pl.draw()
    pl.show()
